//309. 最佳买卖股票时机含冷冻期
//DP讲解
//一.背包含义：dp[i][j]:第i天j状态下持有的最大现金数
//
//二.背包状态含义(j状态含义)
//0：不持有股票且也不是冰冻期状态；1：持有股票状态；2：当天卖出股票状态；3：冰冻期状态
//下面对j状态含义进行讲解
//
//0:不持有股票且也不是冰冻期状态
//分状态：
//a.前一天不持有股票（可以理解为在前一天之前股票已经卖出且前一天没有任何操作或者是第一天没有任何操作）
//dp[i][0] = dp[i - 1][0]
//b.前一天是冰冻期（冰冻期不能交易，且今天没有任何操作）
//dp[i][0] = dp[i - 1][3]
//综上得出：
//dp[i][0] = max(dp[i - 1][0], dp[i - 1][3]);
//
//1：持有股票状态
//分状态
//a.前一天持有股票
//dp[i][1] = dp[i - 1][1]
//b.前一天不持有股票且当天买入股票
//dp[i][1] = dp[i - 1][0] - price[i]
//c.前一天是冰冻期且当天买入股票
//dp[i][1] = dp[i - 1][3] - price[i]
//综上得出:
//dp[i][1] = max(dp[i - 1][1], max(dp[i - 1][0] - price[i], dp[i - 1][3] - price[i]));
//
//2：当天卖出股票状态
//今天可以卖出股票，那么前一天必然是持有股票状态啦
//dp[i][2] = dp[i - 1][1] + price[i]
//
//3：冰冻期状态
//今天是冰冻期状态，那么前一天必然卖出了股票啦
//dp[i][3] = dp[i - 1][2]
//
//三.dp数组初始化
//第0天的dp背包：
//0：不持有股票且也不是冰冻期状态：没买进股票口袋里也没钱
//dp[0][0] = 0
//1：持有股票状态：今天买股票啦，失去了一部分钱去换股票, 失去的金额是第0天股票的价格
//dp[0][1] = -price[0]
//2：当天卖出股票状态:今天买进股票，今天卖出，不赚不亏
//dp[0][2] = 0
//3：冰冻期状态 : 冰冻个啥阿，都没买进也没卖出，也可以理解为今天买进股票也卖出了股票，今天剩下的时间就是冰冻期
//dp[0][3] = 0
//
//四、遍历顺序
//第i天的状态由第i - 1天的状态得来，所以是从第1天开始，按天数从前往后遍历
//函数体
//for (int i = 1; i < prices.size(); i++)
//{
//	dp[i][0] = max(dp[i - 1][0], dp[i - 1][3]);
//	dp[i][1] = max(dp[i - 1][1], max(dp[i - 1][0] - prices[i], dp[i - 1][3] - prices[i]));
//	dp[i][2] = dp[i - 1][1] + prices[i];
//	dp[i][3] = dp[i - 1][2];
//}
//
//五、返回值
//除了买进股票的状态，剩下的状态都不持有股票，那么剩下的状态都有可能持有最大现金数！
//return max(dp[prices.size() - 1][0], max(dp[prices.size() - 1][2], dp[prices.size() - 1][3]));
//
//全部代码
//class Solution {
//public:
//	int maxProfit(vector<int>& prices) {
//		vector<vector<int>>dp(prices.size(), vector<int>(4, 0));
//		dp[0][1] = -prices[0];
//		for (int i = 1; i < prices.size(); i++)
//		{
//			dp[i][0] = max(dp[i - 1][0], dp[i - 1][3]);
//			dp[i][1] = max(dp[i - 1][1], max(dp[i - 1][0] - prices[i], dp[i - 1][3] - prices[i]));
//			dp[i][2] = dp[i - 1][1] + prices[i];
//			dp[i][3] = dp[i - 1][2];
//		}
//		return max(dp[prices.size() - 1][0], max(dp[prices.size() - 1][2], dp[prices.size() - 1][3]));
//	}
//};